{"version":3,"sources":["utils/axios.js","services/auth.service.js","context/SidebarContext.js","utils/notification.js","utils/error.js","components/ThemedSuspense.js","components/AccessibleNavigationAnnouncer.js","routes/PrivateRoute.jsx","routes/PublicRoute.jsx","App.js","serviceWorker.js","index.js","utils/config.js"],"names":["instance","axios","create","baseURL","config","API_URL","headers","authorization","token","localStorage","getItem","JSON","parse","err","removeItem","getCurrentToken","AuthService","isLogin","getCurrentUser","user","getType","type","email","test","String","toLowerCase","password","timeout","post","AUTH_PATH","response","data","notification","message","results","setItem","stringify","setTimeout","window","location","reload","errorHandler","name","patch","SidebarContext","React","createContext","SidebarProvider","children","useState","isSidebarOpen","setIsSidebarOpen","toggleSidebar","closeSidebar","value","useMemo","Provider","title","duration","Store","addNotification","insert","container","animationIn","animationOut","dismiss","length","onScreen","ThemedSuspense","className","AccessibleNavigationAnnouncer","setMessage","useLocation","useEffect","pathname","slice","role","aria-live","aria-atomic","PrivateRoute","Component","component","rest","render","props","to","PublicRoute","restricted","Layout","lazy","Login","CreateAccount","ForgotPassword","App","exact","path","from","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","fallback","usePreferences","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","module","exports","API_PATH"],"mappings":"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","file":"static/js/main.e84f313f.chunk.js","sourcesContent":["import axios from 'axios';\nimport config from './config'\nlet progress = 0;\nexport function getProgress() {\n    return progress\n}\nconst instance = axios.create({\n    baseURL: config.API_URL,\n    headers: { authorization: getCurrentToken() },\n\n})\n\nfunction getCurrentToken() {\n    try {\n        const token = localStorage.getItem('token');\n        return JSON.parse(token);\n    }\n    catch (err) {\n        localStorage.removeItem('token')\n        return null;\n    }\n\n}\nexport default instance;","import instance from 'utils/axios';\nimport config from 'utils/config'\nimport notification from 'utils/notification';\nimport errorHandler from 'utils/error'\nimport axios from 'axios';\nclass AuthService {\n\n    validateEmail(email) {\n        const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return regex.test(String(email).toLowerCase());\n    }\n\n    async signIn(email, password, type, timeout = 1000) {\n        try {\n            const response = await instance\n                .post(config.AUTH_PATH + \"/sign-in\", {\n                    email,\n                    password\n                    , type\n                });\n            const { data } = response;\n            notification('successful login', data.message, 'success');\n            const { results } = data;\n            const [token, user] = results;\n            localStorage.setItem(\"token\", JSON.stringify(token));\n            localStorage.setItem(\"user\", JSON.stringify(user));\n            localStorage.setItem(\"type\", JSON.stringify(type));\n\n            setTimeout(() => window.location.reload(), timeout)\n            return true;\n        }\n        catch (err) {\n            return errorHandler(err)\n        }\n\n    }\n\n    async signUp(email, password, name, type = \"patient\") {\n        try {\n            const response = await instance\n                .post(config.AUTH_PATH + \"/sign-up\", {\n                    email,\n                    password,\n                    name,\n                    type\n                });\n            const { data } = response;\n            notification('successful signup', data.message, 'success');\n\n            return true;\n        }\n        catch (err) {\n            if (err.response) {\n                const { data } = err.response;\n                if (data)\n                    notification('error', data.message, 'warning');\n            }\n\n            else\n                notification('error', err.message, 'danger');\n            return false;\n\n        }\n\n    }\n\n    async forgotPassword(email) {\n\n        try {\n            const response = await instance\n                .post(config.AUTH_PATH + \"/password\", {\n                    email,\n                });\n            const { data } = response;\n            notification('successful send !', data.message, 'success');\n            return true;\n        }\n        catch (err) {\n            if (err.response) {\n                const { data } = err.response;\n                if (data)\n                    notification('error', data.message, 'warning');\n            }\n\n            else\n                notification('error', err.message, 'danger');\n\n            return false;\n        }\n\n    }\n    async resetPassword(password, token) {\n\n        try {\n            const response = await instance\n                .patch(config.AUTH_PATH + \"/password\", {\n                    password: password,\n                    token: token\n                });\n            const { data } = response;\n            notification('successful send !', data.message, 'success');\n            return true;\n        }\n        catch (err) {\n            if (err.response) {\n                const { data } = err.response;\n                if (data)\n                    notification('error', data.message, 'warning');\n            }\n\n            else\n                notification('error', err.message, 'danger');\n\n            return false;\n        }\n\n    }\n\n    logout(timeout = 1000) {\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"user\");\n        localStorage.removeItem(\"type\");\n\n        setTimeout(() => window.location.reload(), timeout)\n\n        notification('successful logout', \"successfull logout from server\");\n\n\n    }\n\n\n\n\n    isLogin = () => {\n        if (localStorage.getItem('token')) {\n            return true;\n        }\n\n        return false;\n    }\n\n    getCurrentUser = () => {\n        const user = JSON.parse(localStorage.getItem('user'));\n        if (user)\n            return user;\n        return false;\n    }\n    getType = () => {\n        const type = JSON.parse(localStorage.getItem('type'));\n        if (type)\n            return type;\n        return false;\n    }\n\n\n}\n\nexport default new AuthService();","import React, { useState, useMemo } from 'react'\n\n// create context\nexport const SidebarContext = React.createContext()\n\nexport const SidebarProvider = ({ children }) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n\n  function toggleSidebar() {\n    setIsSidebarOpen(!isSidebarOpen)\n  }\n\n  function closeSidebar() {\n    setIsSidebarOpen(false)\n  }\n\n  const value = useMemo(\n    () => ({\n      isSidebarOpen,\n      toggleSidebar,\n      closeSidebar,\n    }),\n    [isSidebarOpen]\n  )\n\n  return <SidebarContext.Provider value={value}>{children}</SidebarContext.Provider>\n}\n","import { Store } from 'react-notifications-component';\nexport default function notification(title, message, type = 'default', duration = 3000) {\n    return Store.addNotification({\n        title: title,\n        message: message,\n        type: type,\n        insert: \"top\",\n        container: \"top-right\",\n        animationIn: [\"animate__animated\", \"animate__fadeIn\"],\n        animationOut: [\"animate__animated\", \"animate__fadeOut\"],\n        dismiss: {\n            duration: message.length * 30 || duration,\n            onScreen: true\n        }\n    });\n}","import notification from 'utils/notification'\nfunction errorHandler(err) {\n    if (err.response) {\n        const { data } = err.response;\n        if (data)\n            notification('error', data.message || \"erorr\", 'warning');\n    }\n\n    else {\n\n        notification('error', err.message || \"erorr\", 'danger');\n\n    }\n    return false;\n\n}\nexport default errorHandler;","import React from 'react'\n\nfunction ThemedSuspense() {\n  return (\n    <div className=\"w-full h-screen p-6 text-lg font-medium text-gray-600 dark:text-gray-400 dark:bg-gray-900\">\n      Loading...\n    </div>\n  )\n}\n\nexport default ThemedSuspense\n","import React, { useState, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nfunction AccessibleNavigationAnnouncer() {\n  const [message, setMessage] = useState('')\n  const location = useLocation()\n\n  useEffect(() => {\n    // ignore the /\n    if (location.pathname.slice(1)) {\n      // make sure navigation has occurred and screen reader is ready\n      setTimeout(() => setMessage(`Navigated to ${location.pathname.slice(1)} page.`), 500)\n    } else {\n      setMessage('')\n    }\n  }, [location])\n\n  return (\n    <span className=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"true\">\n      {message}\n    </span>\n  )\n}\n\nexport default AccessibleNavigationAnnouncer\n","import { Route, Redirect } from \"react-router-dom\";\nimport AuthService from 'services/auth.service';\nimport { useContext } from 'react'\nimport React from 'react'\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n    const { isLogin } = AuthService;\n\n\n    return (\n        <Route {...rest} render={props => (\n            isLogin() ?\n                <Component {...props} />\n                : <Redirect to=\"/login\" />\n        )} />\n    );\n};\n\n\nexport default PrivateRoute;\n\n","import { Route, Redirect } from \"react-router-dom\";\nimport AuthService from 'services/auth.service';\nimport React from 'react'\n\n\n\nconst PublicRoute = ({ component: Component, restricted, ...rest }) => {\n    const { isLogin } = AuthService;\n    return (\n        <Route {...rest} render={props => (\n            isLogin() && restricted ?\n                <Redirect to=\"/\" />\n                : <Component {...props} />\n        )} />\n    );\n};\n\nexport default PublicRoute;","import React, { lazy } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\nimport AccessibleNavigationAnnouncer from './components/AccessibleNavigationAnnouncer'\nimport 'react-notifications-component/dist/theme.css'\nimport PrivateRoute from 'routes/PrivateRoute'\nimport PublicRoute from 'routes/PublicRoute'\nconst Layout = lazy(() => import('./containers/Layout'))\nconst Login = lazy(() => import('./pages/Login'))\nconst CreateAccount = lazy(() => import('./pages/CreateAccount'))\nconst ForgotPassword = lazy(() => import('./pages/ForgotPassword'))\n\nfunction App() {\n  return (\n    <>\n\n      <Router>\n        <AccessibleNavigationAnnouncer />\n        <Switch>\n          <PublicRoute exact restricted={true} path=\"/login\" component={Login} />\n          {/* <PublicRoute exact restricted={false} path=\"/question\" component={Question} /> */}\n          <PublicRoute exact restricted={true} path=\"/create-account\" component={CreateAccount} />\n          <PublicRoute exact restricted={true} path=\"/forgot-password\" component={ForgotPassword} />\n          {/* <PublicRoute exact restricted={true} path=\"/reset-password\" component={ResetPassword} /> */}\n\n          {/* Place new routes over this */}\n          <PrivateRoute path=\"/app\" component={Layout} />\n          {/* If you have an index page, you can remothis Redirect */}\n          <Redirect from=\"*\" to=\"/app\" />\n        </Switch>\n      </Router>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport './assets/css/tailwind.output.css'\nimport App from './App'\nimport 'react-notifications-component/dist/theme.css'\nimport { SidebarProvider } from './context/SidebarContext'\nimport ThemedSuspense from './components/ThemedSuspense'\nimport { Windmill } from '@windmill/react-ui'\nimport * as serviceWorker from './serviceWorker'\nimport { ReactNotifications } from 'react-notifications-component'\nimport './index.css'\n// if (process.env.NODE_ENV !== 'production') {\n//   const axe = require('react-axe')\n//   axe(React, ReactDOM, 1000)\n// }\n\nReactDOM.render(\n  <SidebarProvider>\n    <ReactNotifications />\n    <Suspense fallback={<ThemedSuspense />}>\n      <Windmill usePreferences>\n        <App />\n      </Windmill>\n    </Suspense>\n  </SidebarProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n","module.exports = {\n    API_URL: \"http://178.128.242.77:6060\",\n    AUTH_PATH: '/auth',\n    API_PATH: '/api',\n\n}\n"],"sourceRoot":""}